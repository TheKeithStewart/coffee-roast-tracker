name: CI Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/**'
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: frontend

jobs:
  # Install dependencies and cache them
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('frontend/package-lock.json') }}

  # Linting and code quality checks
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

  # Unit tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: frontend/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Build application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: frontend/.next
          key: ${{ runner.os }}-build-${{ github.sha }}

  # Bundle analysis for performance
  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('frontend/package-lock.json') }}

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: frontend/.next
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Install dependencies
        run: npm ci

      - name: Analyze bundle size
        run: |
          npx @next/bundle-analyzer --help || npm install -g @next/bundle-analyzer
          echo "Bundle analysis complete"
          
          # Check bundle sizes against targets
          if [ -f ".next/static/js" ]; then
            JS_SIZE=$(du -sb .next/static/js | cut -f1)
            JS_SIZE_KB=$((JS_SIZE / 1024))
            echo "JavaScript bundle size: ${JS_SIZE_KB}KB"
            
            if [ $JS_SIZE_KB -gt 180 ]; then
              echo "❌ JavaScript bundle size ${JS_SIZE_KB}KB exceeds 180KB target"
              exit 1
            else
              echo "✅ JavaScript bundle size ${JS_SIZE_KB}KB is under 180KB target"
            fi
          fi

  # E2E tests with Playwright
  playwright:
    name: Playwright Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run Playwright tests
        run: npx playwright test

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  # Accessibility testing
  accessibility:
    name: Accessibility Tests  
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production

      - name: Wait for application to start
        run: npx wait-on http://localhost:3000 -t 30000

      - name: Run accessibility tests
        run: |
          # Install axe-cli if not already installed
          npm list -g @axe-core/cli || npm install -g @axe-core/cli
          
          # Run axe against the application
          axe http://localhost:3000 \
            --exit \
            --verbose \
            --tags wcag2a,wcag2aa \
            --reporter json \
            --output-file accessibility-results.json || true
          
          # Display results
          if [ -f accessibility-results.json ]; then
            echo "Accessibility test results:"
            cat accessibility-results.json
          fi

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-results
          path: frontend/accessibility-results.json
          retention-days: 30

  # Performance testing with Lighthouse CI
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: |
          npm start &
          SERVER_PID=$!
          
          # Wait for server to start
          npx wait-on http://localhost:3000 -t 30000
          
          # Run Lighthouse CI
          lhci autorun --config.ci.collect.url="http://localhost:3000" \
            --config.ci.collect.numberOfRuns=3 \
            --config.ci.assert.assertions.categories:performance=0.8 \
            --config.ci.assert.assertions.categories:accessibility=0.9 \
            --config.ci.assert.assertions.categories:best-practices=0.8 \
            --config.ci.assert.assertions.categories:seo=0.8 || true
            
          # Clean up
          kill $SERVER_PID

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, build, bundle-analysis, playwright, accessibility, performance]
    if: always()
    steps:
      - name: Check job statuses
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]] || \
             [[ "${{ needs.bundle-analysis.result }}" != "success" ]] || \
             [[ "${{ needs.playwright.result }}" != "success" ]]; then
            echo "❌ One or more critical jobs failed"
            exit 1
          fi
          
          # Accessibility and performance are non-blocking but should be reported
          if [[ "${{ needs.accessibility.result }}" != "success" ]]; then
            echo "⚠️  Accessibility tests had issues - please review"
          fi
          
          if [[ "${{ needs.performance.result }}" != "success" ]]; then
            echo "⚠️  Performance tests had issues - please review"
          fi
          
          echo "✅ All critical CI checks passed!"

      - name: CI Summary
        run: |
          echo "## CI Pipeline Results 🎯" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Type Check | ${{ needs.lint.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Bundle Analysis | ${{ needs.bundle-analysis.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Playwright E2E | ${{ needs.playwright.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility | ${{ needs.accessibility.result == 'success' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance.result == 'success' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY